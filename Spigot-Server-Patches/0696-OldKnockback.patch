From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: copyandexecute <58366920+copyandexecute@users.noreply.github.com>
Date: Sat, 20 Mar 2021 18:48:13 +0100
Subject: [PATCH] OldKnockback


diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index c56e7fb18f9a56c8025eb70a524f028b5942da37..c602ed242d813ceaca6673cbbd7c6ad2fc9ac50c 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -1,8 +1,20 @@
 package com.destroystokyo.paper;
 
+import co.aikar.timings.Timings;
+import co.aikar.timings.TimingsManager;
 import com.destroystokyo.paper.io.chunk.ChunkTaskManager;
 import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
+import com.google.common.collect.Lists;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.spigotmc.SpigotConfig;
+import org.spigotmc.WatchdogThread;
 
 import java.io.File;
 import java.io.IOException;
@@ -17,19 +29,6 @@ import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.regex.Pattern;
 
-import com.google.common.collect.Lists;
-import net.minecraft.server.MinecraftServer;
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.command.Command;
-import org.bukkit.configuration.ConfigurationSection;
-import org.bukkit.configuration.InvalidConfigurationException;
-import org.bukkit.configuration.file.YamlConfiguration;
-import co.aikar.timings.Timings;
-import co.aikar.timings.TimingsManager;
-import org.spigotmc.SpigotConfig;
-import org.spigotmc.WatchdogThread;
-
 public class PaperConfig {
 
     private static File CONFIG_FILE;
@@ -225,6 +224,22 @@ public class PaperConfig {
                 " - Server Name: " + timingsServerName);
     }
 
+    //HGLabor OldCombat Start
+    public static boolean disableSweeping;
+    public static boolean oldKnockback;
+    public static String oldKnockbackKey;
+    public static boolean disableNewHitSounds;
+    public static boolean overrideVelocity;
+
+    private static void combatSettings() {
+        disableSweeping = getBoolean("settings.combat.disable-sweeping", disableSweeping);
+        oldKnockback = getBoolean("settings.combat.old-knockback", oldKnockback);
+        overrideVelocity = getBoolean("settings.combat.overrideVelocity", overrideVelocity);
+        oldKnockbackKey = getString("settings.combat.old-knockback-key", "oldKnockback");
+        disableNewHitSounds = getBoolean("settings.combat.disable-new-hit-sounds", disableNewHitSounds);
+    }
+    //HGLabor OldCombat End
+
     public static boolean useDisplayNameInQuit = false;
     private static void useDisplayNameInQuit() {
         useDisplayNameInQuit = getBoolean("use-display-name-in-quit-message", useDisplayNameInQuit);
diff --git a/src/main/java/net/minecraft/world/entity/player/EntityHuman.java b/src/main/java/net/minecraft/world/entity/player/EntityHuman.java
index ec0956a98c133bcd3d4f92f696c667eab6ff98f1..53ce38404d6be3c69a62a5efa4b74dd7b27cde1d 100644
--- a/src/main/java/net/minecraft/world/entity/player/EntityHuman.java
+++ b/src/main/java/net/minecraft/world/entity/player/EntityHuman.java
@@ -5,16 +5,6 @@ import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
-import java.nio.charset.StandardCharsets;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.OptionalInt;
-import java.util.UUID;
-import java.util.function.Predicate;
-import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.advancements.CriterionTriggers;
 import net.minecraft.core.BlockPosition;
@@ -22,11 +12,7 @@ import net.minecraft.core.EnumDirection;
 import net.minecraft.core.particles.Particles;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
-import net.minecraft.network.chat.ChatClickable;
-import net.minecraft.network.chat.ChatComponentText;
-import net.minecraft.network.chat.ChatMessage;
-import net.minecraft.network.chat.IChatBaseComponent;
-import net.minecraft.network.chat.IChatMutableComponent;
+import net.minecraft.network.chat.*;
 import net.minecraft.network.protocol.game.PacketPlayOutEntityVelocity;
 import net.minecraft.network.protocol.game.PacketPlayOutNamedSoundEffect;
 import net.minecraft.network.syncher.DataWatcher;
@@ -44,26 +30,12 @@ import net.minecraft.tags.Tag;
 import net.minecraft.tags.TagsFluid;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.Unit;
-import net.minecraft.world.EnumDifficulty;
-import net.minecraft.world.EnumHand;
-import net.minecraft.world.EnumInteractionResult;
-import net.minecraft.world.IInventory;
-import net.minecraft.world.ITileInventory;
+import net.minecraft.world.*;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectUtil;
 import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.EntityInsentient;
-import net.minecraft.world.entity.EntityLiving;
-import net.minecraft.world.entity.EntityPose;
-import net.minecraft.world.entity.EntitySize;
-import net.minecraft.world.entity.EntityTameableAnimal;
-import net.minecraft.world.entity.EntityTypes;
-import net.minecraft.world.entity.EnumItemSlot;
-import net.minecraft.world.entity.EnumMainHand;
-import net.minecraft.world.entity.EnumMonsterType;
-import net.minecraft.world.entity.EnumMoveType;
+import net.minecraft.world.entity.*;
 import net.minecraft.world.entity.ai.attributes.AttributeProvider;
 import net.minecraft.world.entity.ai.attributes.GenericAttributes;
 import net.minecraft.world.entity.animal.EntityParrot;
@@ -80,23 +52,11 @@ import net.minecraft.world.food.FoodMetaData;
 import net.minecraft.world.inventory.Container;
 import net.minecraft.world.inventory.ContainerPlayer;
 import net.minecraft.world.inventory.InventoryEnderChest;
-import net.minecraft.world.item.ItemArmor;
-import net.minecraft.world.item.ItemAxe;
-import net.minecraft.world.item.ItemCooldown;
-import net.minecraft.world.item.ItemElytra;
-import net.minecraft.world.item.ItemProjectileWeapon;
-import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.ItemSword;
-import net.minecraft.world.item.ItemWorldMap;
-import net.minecraft.world.item.Items;
+import net.minecraft.world.item.*;
 import net.minecraft.world.item.crafting.IRecipe;
 import net.minecraft.world.item.enchantment.EnchantmentManager;
 import net.minecraft.world.item.trading.MerchantRecipeList;
-import net.minecraft.world.level.CommandBlockListenerAbstract;
-import net.minecraft.world.level.EnumGamemode;
-import net.minecraft.world.level.GameRules;
-import net.minecraft.world.level.ICollisionAccess;
-import net.minecraft.world.level.World;
+import net.minecraft.world.level.*;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.BlockBed;
 import net.minecraft.world.level.block.BlockRespawnAnchor;
@@ -111,9 +71,7 @@ import net.minecraft.world.phys.AxisAlignedBB;
 import net.minecraft.world.phys.Vec3D;
 import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.ScoreboardTeam;
-import net.minecraft.world.scores.ScoreboardTeamBase;
-
-// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftEntity;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.CraftVector;
@@ -124,26 +82,30 @@ import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityExhaustionEvent;
 import org.bukkit.event.player.PlayerDropItemEvent;
 import org.bukkit.event.player.PlayerVelocityEvent;
+
+import javax.annotation.Nullable;
+import java.nio.charset.StandardCharsets;
+import java.util.*;
+import java.util.function.Predicate;
 // CraftBukkit end
 
 public abstract class EntityHuman extends EntityLiving {
 
     public static final EntitySize bh = EntitySize.b(0.6F, 1.8F);
+    protected static final DataWatcherObject<Byte> bi = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);
+    protected static final DataWatcherObject<Byte> bj = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);
+    protected static final DataWatcherObject<NBTTagCompound> bk = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);
+    protected static final DataWatcherObject<NBTTagCompound> bl = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);
     // CraftBukkit - decompile error
     private static final Map<EntityPose, EntitySize> b = ImmutableMap.<EntityPose, EntitySize>builder().put(EntityPose.STANDING, EntityHuman.bh).put(EntityPose.SLEEPING, EntityHuman.ah).put(EntityPose.FALL_FLYING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntitySize.b(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntitySize.b(0.6F, 1.5F)).put(EntityPose.DYING, EntitySize.c(0.2F, 0.2F)).build();
     private static final DataWatcherObject<Float> c = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.c);
     private static final DataWatcherObject<Integer> d = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.b);
-    protected static final DataWatcherObject<Byte> bi = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a); public static DataWatcherObject<Byte> getSkinPartsWatcher() { return bi; } // Paper - OBFHELPER
-    protected static final DataWatcherObject<Byte> bj = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);
-    protected static final DataWatcherObject<NBTTagCompound> bk = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);
-    protected static final DataWatcherObject<NBTTagCompound> bl = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);
-    private long e;
     public final PlayerInventory inventory = new PlayerInventory(this);
-    protected InventoryEnderChest enderChest = new InventoryEnderChest(this); // CraftBukkit - add "this" to constructor
     public final ContainerPlayer defaultContainer;
+    public final PlayerAbilities abilities = new PlayerAbilities();
+    protected final float bH = 0.02F;
+    private final ItemCooldown bM;
     public Container activeContainer;
-    protected FoodMetaData foodData = new FoodMetaData(this); // CraftBukkit - add "this" to constructor
-    protected int br;
     public float bs;
     public float bt;
     public int bu;
@@ -154,32 +116,26 @@ public abstract class EntityHuman extends EntityLiving {
     public double bz;
     public double bA;
     public int sleepTicks;
-    protected boolean bB;
-    public final PlayerAbilities abilities = new PlayerAbilities();
     public int expLevel;
     public int expTotal;
     public float exp;
-    protected int bG;
-    protected final float bH = 0.02F;
-    private int g;
-    private GameProfile bJ; public final void setProfile(final GameProfile profile) { this.bJ = profile; } // Paper - OBFHELPER
-    private ItemStack bL;
-    private final ItemCooldown bM;
     @Nullable
     public EntityFishingHook hookedFish;
     // Paper start
     public boolean affectsSpawning = true;
-    // Paper end
-
     // CraftBukkit start
     public boolean fauxSleeping;
     public int oldLevel = -1;
-
-    @Override
-    public CraftHumanEntity getBukkitEntity() {
-        return (CraftHumanEntity) super.getBukkitEntity();
-    }
-    // CraftBukkit end
+    protected InventoryEnderChest enderChest = new InventoryEnderChest(this); // CraftBukkit - add "this" to constructor
+    protected FoodMetaData foodData = new FoodMetaData(this); // CraftBukkit - add "this" to constructor
+    protected int br;
+    protected boolean bB;
+    protected int bG;
+    private long e;
+    private int g;
+    private GameProfile bJ;
+    private ItemStack bL;
+    // Paper end
 
     public EntityHuman(World world, BlockPosition blockposition, float f, GameProfile gameprofile) {
         super(EntityTypes.PLAYER, world);
@@ -193,6 +149,66 @@ public abstract class EntityHuman extends EntityLiving {
         this.aN = 180.0F;
     }
 
+    public static DataWatcherObject<Byte> getSkinPartsWatcher() {
+        return bi;
+    } // Paper - OBFHELPER
+
+    public static AttributeProvider.Builder ep() {
+        return EntityLiving.cL().a(GenericAttributes.ATTACK_DAMAGE, 1.0D).a(GenericAttributes.MOVEMENT_SPEED, 0.10000000149011612D).a(GenericAttributes.ATTACK_SPEED).a(GenericAttributes.LUCK);
+    }
+    // CraftBukkit end
+
+    public static Optional<Vec3D> getBed(WorldServer worldserver, BlockPosition blockposition, float f, boolean flag, boolean flag1) {
+        IBlockData iblockdata = worldserver.getType(blockposition);
+        Block block = iblockdata.getBlock();
+
+        if (block instanceof BlockRespawnAnchor && (Integer) iblockdata.get(BlockRespawnAnchor.a) > 0 && BlockRespawnAnchor.a((World) worldserver)) {
+            Optional<Vec3D> optional = BlockRespawnAnchor.a(EntityTypes.PLAYER, (ICollisionAccess) worldserver, blockposition);
+
+            if (!flag1 && optional.isPresent()) {
+                worldserver.setTypeAndData(blockposition, (IBlockData) iblockdata.set(BlockRespawnAnchor.a, (Integer) iblockdata.get(BlockRespawnAnchor.a) - 1), 3);
+            }
+
+            return optional;
+        } else if (block instanceof BlockBed && BlockBed.a((World) worldserver)) {
+            return BlockBed.a(EntityTypes.PLAYER, worldserver, blockposition, f);
+        } else if (!flag) {
+            return Optional.empty();
+        } else {
+            boolean flag2 = block.ai_();
+            boolean flag3 = worldserver.getType(blockposition.up()).getBlock().ai_();
+
+            return flag2 && flag3 ? Optional.of(new Vec3D((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.1D, (double) blockposition.getZ() + 0.5D)) : Optional.empty();
+        }
+    }
+
+    // Paper start - send SoundEffect to everyone who can see fromEntity
+    private static void sendSoundEffect(EntityHuman fromEntity, double x, double y, double z, SoundEffect soundEffect, SoundCategory soundCategory, float volume, float pitch) {
+        fromEntity.world.playSound(fromEntity, x, y, z, soundEffect, soundCategory, volume, pitch); // This will not send the effect to the entity himself
+        if (fromEntity instanceof EntityPlayer) {
+            ((EntityPlayer) fromEntity).playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(soundEffect, soundCategory, x, y, z, volume, pitch));
+        }
+    }
+
+    public static UUID a(GameProfile gameprofile) {
+        UUID uuid = gameprofile.getId();
+
+        if (uuid == null) {
+            uuid = getOfflineUUID(gameprofile.getName());
+        }
+
+        return uuid;
+    }
+
+    public static UUID getOfflineUUID(String s) {
+        return UUID.nameUUIDFromBytes(("OfflinePlayer:" + s).getBytes(StandardCharsets.UTF_8));
+    }
+
+    @Override
+    public CraftHumanEntity getBukkitEntity() {
+        return (CraftHumanEntity) super.getBukkitEntity();
+    }
+
     public boolean a(World world, BlockPosition blockposition, EnumGamemode enumgamemode) {
         if (!enumgamemode.d()) {
             return false;
@@ -207,10 +223,6 @@ public abstract class EntityHuman extends EntityLiving {
         }
     }
 
-    public static AttributeProvider.Builder ep() {
-        return EntityLiving.cL().a(GenericAttributes.ATTACK_DAMAGE, 1.0D).a(GenericAttributes.MOVEMENT_SPEED, 0.10000000149011612D).a(GenericAttributes.ATTACK_SPEED).a(GenericAttributes.LUCK);
-    }
-
     @Override
     protected void initDatawatcher() {
         super.initDatawatcher();
@@ -435,7 +447,9 @@ public abstract class EntityHuman extends EntityLiving {
         this.world.playSound(this, this.locX(), this.locY(), this.locZ(), soundeffect, this.getSoundCategory(), f, f1);
     }
 
-    public void a(SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {}
+    public void a(SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {
+    }
+    // Paper end
 
     @Override
     public SoundCategory getSoundCategory() {
@@ -452,7 +466,6 @@ public abstract class EntityHuman extends EntityLiving {
         closeInventory();
         this.activeContainer = this.defaultContainer;
     }
-    // Paper end
 
     public void closeInventory() {
         this.activeContainer = this.defaultContainer;
@@ -974,25 +987,33 @@ public abstract class EntityHuman extends EntityLiving {
         return !this.abilities.isFlying && super.cP();
     }
 
-    public void openSign(TileEntitySign tileentitysign) {}
+    public void openSign(TileEntitySign tileentitysign) {
+    }
 
-    public void a(CommandBlockListenerAbstract commandblocklistenerabstract) {}
+    public void a(CommandBlockListenerAbstract commandblocklistenerabstract) {
+    }
 
-    public void a(TileEntityCommand tileentitycommand) {}
+    public void a(TileEntityCommand tileentitycommand) {
+    }
 
-    public void a(TileEntityStructure tileentitystructure) {}
+    public void a(TileEntityStructure tileentitystructure) {
+    }
 
-    public void a(TileEntityJigsaw tileentityjigsaw) {}
+    public void a(TileEntityJigsaw tileentityjigsaw) {
+    }
 
-    public void openHorseInventory(EntityHorseAbstract entityhorseabstract, IInventory iinventory) {}
+    public void openHorseInventory(EntityHorseAbstract entityhorseabstract, IInventory iinventory) {
+    }
 
     public OptionalInt openContainer(@Nullable ITileInventory itileinventory) {
         return OptionalInt.empty();
     }
 
-    public void openTrade(int i, MerchantRecipeList merchantrecipelist, int j, int k, boolean flag, boolean flag1) {}
+    public void openTrade(int i, MerchantRecipeList merchantrecipelist, int j, int k, boolean flag, boolean flag1) {
+    }
 
-    public void openBook(ItemStack itemstack, EnumHand enumhand) {}
+    public void openBook(ItemStack itemstack, EnumHand enumhand) {
+    }
 
     public EnumInteractionResult a(Entity entity, EnumHand enumhand) {
         if (this.isSpectator()) {
@@ -1040,8 +1061,13 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     // Paper start
-    @Override public void bf() { stopRiding(false); }
-    @Override public void stopRiding(boolean suppressCancellation) {
+    @Override
+    public void bf() {
+        stopRiding(false);
+    }
+
+    @Override
+    public void stopRiding(boolean suppressCancellation) {
         // Paper end
         super.stopRiding(suppressCancellation); // Paper - suppress
         this.j = 0;
@@ -1136,7 +1162,8 @@ public abstract class EntityHuman extends EntityLiving {
                     int i = b0 + EnchantmentManager.b((EntityLiving) this);
 
                     if (this.isSprinting() && flag) {
-                        sendSoundEffect(this, this.locX(), this.locY(), this.locZ(), SoundEffects.ENTITY_PLAYER_ATTACK_KNOCKBACK, this.getSoundCategory(), 1.0F, 1.0F); // Paper - send while respecting visibility
+                        if (!com.destroystokyo.paper.PaperConfig.disableNewHitSounds)
+                            sendSoundEffect(this, this.locX(), this.locY(), this.locZ(), SoundEffects.ENTITY_PLAYER_ATTACK_KNOCKBACK, this.getSoundCategory(), 1.0F, 1.0F); // Paper - send while respecting visibility
                         ++i;
                         flag1 = true;
                     }
@@ -1153,7 +1180,7 @@ public abstract class EntityHuman extends EntityLiving {
                     boolean flag3 = false;
                     double d0 = (double) (this.A - this.z);
 
-                    if (flag && !flag2 && !flag1 && this.onGround && d0 < (double) this.dN()) {
+                    if (!com.destroystokyo.paper.PaperConfig.disableSweeping && flag && !flag2 && !flag1 && this.onGround && d0 < (double) this.dN()) {
                         ItemStack itemstack = this.b(EnumHand.MAIN_HAND);
 
                         if (itemstack.getItem() instanceof ItemSword) {
@@ -1186,7 +1213,17 @@ public abstract class EntityHuman extends EntityLiving {
                     if (flag5) {
                         if (i > 0) {
                             if (entity instanceof EntityLiving) {
-                                ((EntityLiving) entity).doKnockback((float) i * 0.5F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)), this); // Paper
+                                //HGLabor START oldKB
+                                if (com.destroystokyo.paper.PaperConfig.oldKnockback) {
+                                    CraftHumanEntity damager = this.getBukkitEntity();
+                                    CraftEntity bukkitEntity = entity.getBukkitEntity();
+                                    if (damager.hasMetadata(com.destroystokyo.paper.PaperConfig.oldKnockbackKey) && bukkitEntity.hasMetadata(com.destroystokyo.paper.PaperConfig.oldKnockbackKey)) {
+                                        entity.i(-MathHelper.sin(this.yaw * 0.017453292F) * (float) i * 0.5F, 0.1D, MathHelper.cos(this.yaw * 0.017453292F) * (float) i * 0.5F);
+                                    } else {
+                                        ((EntityLiving) entity).doKnockback((float) i * 0.5F, MathHelper.sin(this.yaw * 0.017453292F), -MathHelper.cos(this.yaw * 0.017453292F), this); // Paper
+                                    }
+                                }
+                                //HGLabor END oldKB
                             } else {
                                 entity.i((double) (-MathHelper.sin(this.yaw * 0.017453292F) * (float) i * 0.5F), 0.1D, (double) (MathHelper.cos(this.yaw * 0.017453292F) * (float) i * 0.5F));
                             }
@@ -1210,7 +1247,7 @@ public abstract class EntityHuman extends EntityLiving {
                                 if (entityliving != this && entityliving != entity && !this.r(entityliving) && (!(entityliving instanceof EntityArmorStand) || !((EntityArmorStand) entityliving).isMarker()) && this.h((Entity) entityliving) < 9.0D) {
                                     // CraftBukkit start - Only apply knockback if the damage hits
                                     if (entityliving.damageEntity(DamageSource.playerAttack(this).sweep(), f4)) {
-                                    entityliving.doKnockback(0.4F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)), this); // Paper
+                                        entityliving.doKnockback(0.4F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)), this); // Paper
                                     }
                                     // CraftBukkit end
                                 }
@@ -1236,9 +1273,9 @@ public abstract class EntityHuman extends EntityLiving {
                             }
 
                             if (!cancelled) {
-                            ((EntityPlayer) entity).playerConnection.sendPacket(new PacketPlayOutEntityVelocity(entity));
-                            entity.velocityChanged = false;
-                            entity.setMot(vec3d);
+                                ((EntityPlayer) entity).playerConnection.sendPacket(new PacketPlayOutEntityVelocity(entity));
+                                entity.velocityChanged = false;
+                                entity.setMot(vec3d);
                             }
                             // CraftBukkit end
                         }
@@ -1304,7 +1341,8 @@ public abstract class EntityHuman extends EntityLiving {
 
                         this.applyExhaustion(world.spigotConfig.combatExhaustion, EntityExhaustionEvent.ExhaustionReason.ATTACK); // CraftBukkit - EntityExhaustionEvent // Spigot - Change to use configurable value
                     } else {
-                        sendSoundEffect(this, this.locX(), this.locY(), this.locZ(), SoundEffects.ENTITY_PLAYER_ATTACK_NODAMAGE, this.getSoundCategory(), 1.0F, 1.0F); // Paper - send while respecting visibility
+                        if (!com.destroystokyo.paper.PaperConfig.disableNewHitSounds)
+                            sendSoundEffect(this, this.locX(), this.locY(), this.locZ(), SoundEffects.ENTITY_PLAYER_ATTACK_NODAMAGE, this.getSoundCategory(), 1.0F, 1.0F); // Paper - send while respecting visibility
                         if (flag4) {
                             entity.extinguish();
                         }
@@ -1340,9 +1378,11 @@ public abstract class EntityHuman extends EntityLiving {
 
     }
 
-    public void a(Entity entity) {}
+    public void a(Entity entity) {
+    }
 
-    public void b(Entity entity) {}
+    public void b(Entity entity) {
+    }
 
     public void ex() {
         double d0 = (double) (-MathHelper.sin(this.yaw * 0.017453292F));
@@ -1372,6 +1412,10 @@ public abstract class EntityHuman extends EntityLiving {
         return this.bJ;
     }
 
+    public final void setProfile(final GameProfile profile) {
+        this.bJ = profile;
+    } // Paper - OBFHELPER
+
     public Either<EntityHuman.EnumBedResult, Unit> sleep(BlockPosition blockposition) {
         // CraftBukkit start
         return this.sleep(blockposition, false);
@@ -1398,30 +1442,6 @@ public abstract class EntityHuman extends EntityLiving {
         this.wakeup(true, true);
     }
 
-    public static Optional<Vec3D> getBed(WorldServer worldserver, BlockPosition blockposition, float f, boolean flag, boolean flag1) {
-        IBlockData iblockdata = worldserver.getType(blockposition);
-        Block block = iblockdata.getBlock();
-
-        if (block instanceof BlockRespawnAnchor && (Integer) iblockdata.get(BlockRespawnAnchor.a) > 0 && BlockRespawnAnchor.a((World) worldserver)) {
-            Optional<Vec3D> optional = BlockRespawnAnchor.a(EntityTypes.PLAYER, (ICollisionAccess) worldserver, blockposition);
-
-            if (!flag1 && optional.isPresent()) {
-                worldserver.setTypeAndData(blockposition, (IBlockData) iblockdata.set(BlockRespawnAnchor.a, (Integer) iblockdata.get(BlockRespawnAnchor.a) - 1), 3);
-            }
-
-            return optional;
-        } else if (block instanceof BlockBed && BlockBed.a((World) worldserver)) {
-            return BlockBed.a(EntityTypes.PLAYER, worldserver, blockposition, f);
-        } else if (!flag) {
-            return Optional.empty();
-        } else {
-            boolean flag2 = block.ai_();
-            boolean flag3 = worldserver.getType(blockposition.up()).getBlock().ai_();
-
-            return flag2 && flag3 ? Optional.of(new Vec3D((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.1D, (double) blockposition.getZ() + 0.5D)) : Optional.empty();
-        }
-    }
-
     public boolean isDeeplySleeping() {
         return this.isSleeping() && this.sleepTicks >= 100;
     }
@@ -1430,7 +1450,8 @@ public abstract class EntityHuman extends EntityLiving {
         return this.sleepTicks;
     }
 
-    public void a(IChatBaseComponent ichatbasecomponent, boolean flag) {}
+    public void a(IChatBaseComponent ichatbasecomponent, boolean flag) {
+    }
 
     public void a(MinecraftKey minecraftkey) {
         this.b(StatisticList.CUSTOM.b(minecraftkey));
@@ -1444,15 +1465,18 @@ public abstract class EntityHuman extends EntityLiving {
         this.a(statistic, 1);
     }
 
-    public void a(Statistic<?> statistic, int i) {}
+    public void a(Statistic<?> statistic, int i) {
+    }
 
-    public void a(Statistic<?> statistic) {}
+    public void a(Statistic<?> statistic) {
+    }
 
     public int discoverRecipes(Collection<IRecipe<?>> collection) {
         return 0;
     }
 
-    public void a(MinecraftKey[] aminecraftkey) {}
+    public void a(MinecraftKey[] aminecraftkey) {
+    }
 
     public int undiscoverRecipes(Collection<IRecipe<?>> collection) {
         return 0;
@@ -1647,8 +1671,8 @@ public abstract class EntityHuman extends EntityLiving {
     public void stopGliding() {
         // CraftBukkit start
         if (!org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
-        this.setFlag(7, true);
-        this.setFlag(7, false);
+            this.setFlag(7, true);
+            this.setFlag(7, false);
         }
         // CraftBukkit end
     }
@@ -1718,6 +1742,7 @@ public abstract class EntityHuman extends EntityLiving {
 
         this.bG = this.random.nextInt();
     }
+    // Paper end
 
     public void levelDown(int i) {
         this.expLevel += i;
@@ -1739,14 +1764,6 @@ public abstract class EntityHuman extends EntityLiving {
     public int getExpToLevel() {
         return this.expLevel >= 30 ? 112 + (this.expLevel - 30) * 9 : (this.expLevel >= 15 ? 37 + (this.expLevel - 15) * 5 : 7 + this.expLevel * 2);
     }
-    // Paper start - send SoundEffect to everyone who can see fromEntity
-    private static void sendSoundEffect(EntityHuman fromEntity, double x, double y, double z, SoundEffect soundEffect, SoundCategory soundCategory, float volume, float pitch) {
-        fromEntity.world.playSound(fromEntity, x, y, z, soundEffect, soundCategory, volume, pitch); // This will not send the effect to the entity himself
-        if (fromEntity instanceof EntityPlayer) {
-            ((EntityPlayer) fromEntity).playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(soundEffect, soundCategory, x, y, z, volume, pitch));
-        }
-    }
-    // Paper end
 
     // CraftBukkit start
     public void applyExhaustion(float f) {
@@ -1816,9 +1833,11 @@ public abstract class EntityHuman extends EntityLiving {
         return !this.abilities.isFlying && (!this.onGround || !this.bx());
     }
 
-    public void updateAbilities() {}
+    public void updateAbilities() {
+    }
 
-    public void a(EnumGamemode enumgamemode) {}
+    public void a(EnumGamemode enumgamemode) {
+    }
 
     @Override
     public IChatBaseComponent getDisplayName() {
@@ -1919,6 +1938,8 @@ public abstract class EntityHuman extends EntityLiving {
         }
         return entity;
     }
+    // Paper end
+
     // Paper - maintain old signature
     private boolean spawnEntityFromShoulder(NBTTagCompound nbttagcompound) { // CraftBukkit void->boolean
         return spawnEntityFromShoulder0(nbttagcompound) != null;
@@ -1940,7 +1961,6 @@ public abstract class EntityHuman extends EntityLiving {
 
         return null; // Paper - return null
     }
-    // Paper end
 
     @Override
     public abstract boolean isSpectator();
@@ -1995,32 +2015,18 @@ public abstract class EntityHuman extends EntityLiving {
         }
     }
 
-    @Override
-    public void setAbsorptionHearts(float f) {
-        if (f < 0.0F) {
-            f = 0.0F;
-        }
-
-        this.getDataWatcher().set(EntityHuman.c, f);
-    }
-
     @Override
     public float getAbsorptionHearts() {
         return (Float) this.getDataWatcher().get(EntityHuman.c);
     }
 
-    public static UUID a(GameProfile gameprofile) {
-        UUID uuid = gameprofile.getId();
-
-        if (uuid == null) {
-            uuid = getOfflineUUID(gameprofile.getName());
+    @Override
+    public void setAbsorptionHearts(float f) {
+        if (f < 0.0F) {
+            f = 0.0F;
         }
 
-        return uuid;
-    }
-
-    public static UUID getOfflineUUID(String s) {
-        return UUID.nameUUIDFromBytes(("OfflinePlayer:" + s).getBytes(StandardCharsets.UTF_8));
+        this.getDataWatcher().set(EntityHuman.c, f);
     }
 
     @Override
@@ -2105,7 +2111,10 @@ public abstract class EntityHuman extends EntityLiving {
         this.datawatcher.set(EntityHuman.bl, nbttagcompound);
     }
 
-    public float getCooldownPeriod() { return this.eR(); } // Paper - OBFHELPER
+    public float getCooldownPeriod() {
+        return this.eR();
+    } // Paper - OBFHELPER
+
     public float eR() {
         return (float) (1.0D / this.b(GenericAttributes.ATTACK_SPEED) * 20.0D);
     }
@@ -2155,11 +2164,11 @@ public abstract class EntityHuman extends EntityLiving {
     // Paper start
     protected boolean tryReadyArrow(ItemStack bow, ItemStack itemstack) {
         return !(this instanceof EntityPlayer) ||
-                new com.destroystokyo.paper.event.player.PlayerReadyArrowEvent(
-                    ((EntityPlayer) this).getBukkitEntity(),
-                    org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(bow),
-                    org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemstack)
-                ).callEvent();
+            new com.destroystokyo.paper.event.player.PlayerReadyArrowEvent(
+                ((EntityPlayer) this).getBukkitEntity(),
+                org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(bow),
+                org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemstack)
+            ).callEvent();
         // Paper end
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index e5549439b3d4d608cf37dd33b6c8c9e10dfe9328..0928dbea4793c650c3309ff2eb201011bf278409 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1,34 +1,16 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.destroystokyo.paper.ClientOption;
 import com.destroystokyo.paper.ClientOption.ChatVisibility;
+import com.destroystokyo.paper.PaperConfig;
 import com.destroystokyo.paper.PaperSkinParts;
-import com.destroystokyo.paper.ClientOption;
 import com.destroystokyo.paper.Title;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
 import com.mojang.authlib.GameProfile;
 import io.netty.buffer.Unpooled;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.lang.ref.WeakReference;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections; // Paper
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
-import java.util.WeakHashMap;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import javax.annotation.Nullable;
+import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.SystemUtils;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.core.BlockPosition;
@@ -37,23 +19,7 @@ import net.minecraft.network.PacketDataSerializer;
 import net.minecraft.network.chat.ChatComponentText;
 import net.minecraft.network.chat.ChatMessageType;
 import net.minecraft.network.chat.IChatBaseComponent;
-import net.minecraft.network.protocol.game.PacketPlayOutBlockBreakAnimation;
-import net.minecraft.network.protocol.game.PacketPlayOutBlockChange;
-import net.minecraft.network.protocol.game.PacketPlayOutChat;
-import net.minecraft.network.protocol.game.PacketPlayOutCustomPayload;
-import net.minecraft.network.protocol.game.PacketPlayOutCustomSoundEffect;
-import net.minecraft.network.protocol.game.PacketPlayOutExperience;
-import net.minecraft.network.protocol.game.PacketPlayOutMap;
-import net.minecraft.network.protocol.game.PacketPlayOutNamedSoundEffect;
-import net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo;
-import net.minecraft.network.protocol.game.PacketPlayOutPlayerListHeaderFooter;
-import net.minecraft.network.protocol.game.PacketPlayOutSpawnPosition;
-import net.minecraft.network.protocol.game.PacketPlayOutStopSound;
-import net.minecraft.network.protocol.game.PacketPlayOutTitle;
-import net.minecraft.network.protocol.game.PacketPlayOutUpdateAttributes;
-import net.minecraft.network.protocol.game.PacketPlayOutUpdateHealth;
-import net.minecraft.network.protocol.game.PacketPlayOutWorldEvent;
-import net.minecraft.network.protocol.game.PacketPlayOutWorldParticles;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.resources.MinecraftKey;
 import net.minecraft.server.AdvancementDataPlayer;
 import net.minecraft.server.level.EntityPlayer;
@@ -84,33 +50,13 @@ import net.minecraft.world.level.saveddata.maps.MapIcon;
 import net.minecraft.world.phys.Vec3D;
 import org.apache.commons.lang.NotImplementedException;
 import org.apache.commons.lang.Validate;
-import org.bukkit.BanList;
-import org.bukkit.Bukkit;
-import org.bukkit.DyeColor;
-import org.bukkit.Effect;
-import org.bukkit.GameMode;
-import org.bukkit.Instrument;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.Note;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.Particle;
-import org.bukkit.Sound;
-import org.bukkit.Statistic;
-import org.bukkit.WeatherType;
+import org.bukkit.*;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
 import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
-import org.bukkit.craftbukkit.CraftEffect;
-import org.bukkit.craftbukkit.CraftOfflinePlayer;
-import org.bukkit.craftbukkit.CraftParticle;
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.CraftSound;
-import org.bukkit.craftbukkit.CraftStatistic;
-import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.*;
 import org.bukkit.craftbukkit.advancement.CraftAdvancement;
 import org.bukkit.craftbukkit.advancement.CraftAdvancementProgress;
 import org.bukkit.craftbukkit.block.CraftSign;
@@ -135,28 +81,133 @@ import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.scoreboard.Scoreboard;
+import org.bukkit.util.Vector;
 
-import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import javax.annotation.Nullable;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.lang.ref.WeakReference;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.*;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 @DelegateDeserialization(CraftOfflinePlayer.class)
 public class CraftPlayer extends CraftHumanEntity implements Player {
-    private long firstPlayed = 0;
-    private long lastPlayed = 0;
-    private boolean hasPlayedBefore = false;
+    private static final WeakHashMap<Plugin, WeakReference<Plugin>> pluginWeakReferences = new WeakHashMap<>();
+    private static final boolean DISABLE_CHANNEL_LIMIT = System.getProperty("paper.disableChannelLimit") != null; // Paper - add a flag to disable the channel limit
     private final ConversationTracker conversationTracker = new ConversationTracker();
     private final Set<String> channels = new HashSet<String>();
     private final Map<UUID, Set<WeakReference<Plugin>>> hiddenPlayers = new HashMap<>();
-    private static final WeakHashMap<Plugin, WeakReference<Plugin>> pluginWeakReferences = new WeakHashMap<>();
+    private long firstPlayed = 0;
+    private long lastPlayed = 0;
+    private boolean hasPlayedBefore = false;
     private int hash = 0;
     private double health = 20;
+    // Spigot start
+    private final Player.Spigot spigot = new Player.Spigot() {
+
+        @Override
+        public InetSocketAddress getRawAddress() {
+            return (InetSocketAddress) getHandle().playerConnection.networkManager.getRawAddress();
+        }
+
+        @Override
+        public boolean getCollidesWithEntities() {
+            return CraftPlayer.this.isCollidable();
+        }
+
+        @Override
+        public void setCollidesWithEntities(boolean collides) {
+            CraftPlayer.this.setCollidable(collides);
+        }
+
+        @Override
+        public void respawn() {
+            if (getHealth() <= 0 && isOnline()) {
+                server.getServer().getPlayerList().moveToWorld(getHandle(), false);
+            }
+        }
+
+        @Override
+        public Set<Player> getHiddenPlayers() {
+            Set<Player> ret = new HashSet<Player>();
+            for (UUID u : hiddenPlayers.keySet()) {
+                ret.add(getServer().getPlayer(u));
+            }
+
+            return java.util.Collections.unmodifiableSet(ret);
+        }
+
+        @Override
+        public void sendMessage(BaseComponent component) {
+            sendMessage(new BaseComponent[]{component});
+        }
+
+        @Override
+        public void sendMessage(BaseComponent... components) {
+            if (getHandle().playerConnection == null) return;
+
+            PacketPlayOutChat packet = new PacketPlayOutChat(null, net.minecraft.network.chat.ChatMessageType.SYSTEM, SystemUtils.b);
+            packet.components = components;
+            getHandle().playerConnection.sendPacket(packet);
+        }
+
+        @Override
+        public void sendMessage(UUID sender, BaseComponent component) {
+            this.sendMessage(net.md_5.bungee.api.ChatMessageType.CHAT, sender, component);
+        }
+
+        @Override
+        public void sendMessage(UUID sender, BaseComponent... components) {
+            this.sendMessage(net.md_5.bungee.api.ChatMessageType.CHAT, sender, components);
+        }
+
+        @Override
+        public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent component) {
+            sendMessage(position, new BaseComponent[]{component});
+        }
+
+        @Override
+        public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent... components) {
+            if (getHandle().playerConnection == null) return;
+
+            PacketPlayOutChat packet = new PacketPlayOutChat(null, net.minecraft.network.chat.ChatMessageType.a((byte) position.ordinal()), SystemUtils.b);
+            packet.components = components;
+            getHandle().playerConnection.sendPacket(packet);
+        }
+
+        @Override
+        public void sendMessage(net.md_5.bungee.api.ChatMessageType position, UUID sender, BaseComponent component) {
+            sendMessage(position, sender, new BaseComponent[]{component});
+        }
+
+        @Override
+        public void sendMessage(net.md_5.bungee.api.ChatMessageType position, UUID sender, BaseComponent... components) {
+            if (getHandle().playerConnection == null) return;
+
+            PacketPlayOutChat packet = new PacketPlayOutChat(null, net.minecraft.network.chat.ChatMessageType.a((byte) position.ordinal()), sender == null ? SystemUtils.b : sender);
+            packet.components = components;
+            getHandle().playerConnection.sendPacket(packet);
+        }
+
+        // Paper start
+        @Override
+        public int getPing() {
+            return getHandle().ping;
+        }
+        // Paper end
+    };
     private boolean scaledHealth = false;
     private double healthScale = 20;
     // Paper start
     private org.bukkit.event.player.PlayerResourcePackStatusEvent.Status resourcePackStatus;
     private String resourcePackHash;
-    private static final boolean DISABLE_CHANNEL_LIMIT = System.getProperty("paper.disableChannelLimit") != null; // Paper - add a flag to disable the channel limit
-    private long lastSaveTime;
     // Paper end
+    private long lastSaveTime;
+    private net.kyori.adventure.text.Component playerListHeader; // Paper - Adventure
+    private net.kyori.adventure.text.Component playerListFooter; // Paper - Adventure
 
     public CraftPlayer(CraftServer server, EntityPlayer entity) {
         super(server, entity);
@@ -164,6 +215,18 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         firstPlayed = System.currentTimeMillis();
     }
 
+    @Nullable
+    private static WeakReference<Plugin> getPluginWeakReference(@Nullable Plugin plugin) {
+        return (plugin == null) ? null : pluginWeakReferences.computeIfAbsent(plugin, WeakReference::new);
+    }
+
+    private static int ticks(final java.time.Duration duration) {
+        if (duration == null) {
+            return -1;
+        }
+        return (int) (duration.toMillis() / 50L);
+    }
+
     public GameProfile getProfile() {
         return getHandle().getProfile();
     }
@@ -172,6 +235,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public boolean isOp() {
         return server.getHandle().isOp(getProfile());
     }
+    // Paper end
 
     @Override
     public void setOp(boolean value) {
@@ -202,6 +266,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             return null;
         }
     }
+    //HGLabor End
 
     // Paper start - Implement NetworkClient
     @Override
@@ -215,7 +280,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (getHandle().playerConnection == null) return null;
         return getHandle().playerConnection.networkManager.virtualHost;
     }
-    // Paper end
 
     @Override
     public double getEyeHeight(boolean ignorePose) {
@@ -235,6 +299,19 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    //HGLabor Start
+    @Override
+    public void setVelocity(Vector velocity) {
+        // Send the new velocity to the player's client immediately, so it isn't affected by
+        // any movement packets from this player that may be processed before the end of the tick.
+        // Without this, player velocity changes tend to be very inconsistent.
+        super.setVelocity(velocity);
+        if (PaperConfig.overrideVelocity) {
+            this.getHandle().playerConnection.sendPacket(new PacketPlayOutEntityVelocity(this.getHandle()));
+            this.getHandle().velocityChanged = false;
+        }
+    }
+
     @Override
     public void sendRawMessage(UUID sender, String message) {
         if (getHandle().playerConnection == null) return;
@@ -293,30 +370,29 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setPlayerListHeaderFooter(BaseComponent[] header, BaseComponent[] footer) {
-         if (header != null) {
-             String headerJson = net.md_5.bungee.chat.ComponentSerializer.toString(header);
-             playerListHeader = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(headerJson);
-         } else {
-             playerListHeader = null;
-         }
+        if (header != null) {
+            String headerJson = net.md_5.bungee.chat.ComponentSerializer.toString(header);
+            playerListHeader = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(headerJson);
+        } else {
+            playerListHeader = null;
+        }
 
         if (footer != null) {
-             String footerJson = net.md_5.bungee.chat.ComponentSerializer.toString(footer);
-             playerListFooter = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(footerJson);
+            String footerJson = net.md_5.bungee.chat.ComponentSerializer.toString(footer);
+            playerListFooter = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(footerJson);
         } else {
-             playerListFooter = null;
-         }
+            playerListFooter = null;
+        }
 
-         updatePlayerListHeaderFooter();
+        updatePlayerListHeaderFooter();
     }
 
     @Override
     public void setPlayerListHeaderFooter(BaseComponent header, BaseComponent footer) {
         this.setPlayerListHeaderFooter(header == null ? null : new BaseComponent[]{header},
-                footer == null ? null : new BaseComponent[]{footer});
+            footer == null ? null : new BaseComponent[]{footer});
     }
 
-
     @Override
     public void setTitleTimes(int fadeInTicks, int stayTicks, int fadeOutTicks) {
         getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.TIMES, (BaseComponent[]) null, fadeInTicks, stayTicks, fadeOutTicks));
@@ -341,6 +417,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void showTitle(BaseComponent title) {
         showTitle(new BaseComponent[]{title});
     }
+    // Paper end
 
     @Override
     public void showTitle(BaseComponent[] title, BaseComponent[] subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks) {
@@ -378,11 +455,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void hideTitle() {
         getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.CLEAR, (BaseComponent[]) null, 0, 0, 0));
     }
-    // Paper end
 
     @Override
     public String getDisplayName() {
-        if(true) return io.papermc.paper.adventure.DisplayNames.getLegacy(this); // Paper
+        if (true) return io.papermc.paper.adventure.DisplayNames.getLegacy(this); // Paper
         return getHandle().displayName;
     }
 
@@ -402,18 +478,22 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             }
         }
     }
+
     @Override
     public net.kyori.adventure.text.Component playerListName() {
         return getHandle().listName == null ? net.kyori.adventure.text.Component.text(getName()) : io.papermc.paper.adventure.PaperAdventure.asAdventure(getHandle().listName);
     }
+
     @Override
     public net.kyori.adventure.text.Component playerListHeader() {
         return playerListHeader;
     }
+
     @Override
     public net.kyori.adventure.text.Component playerListFooter() {
         return playerListFooter;
     }
+
     // Paper end
     @Override
     public String getPlayerListName() {
@@ -433,25 +513,22 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
-    private net.kyori.adventure.text.Component playerListHeader; // Paper - Adventure
-    private net.kyori.adventure.text.Component playerListFooter; // Paper - Adventure
-
     @Override
     public String getPlayerListHeader() {
         return (playerListHeader == null) ? null : io.papermc.paper.adventure.PaperAdventure.LEGACY_SECTION_UXRC.serialize(playerListHeader); // Paper - Adventure
     }
 
-    @Override
-    public String getPlayerListFooter() {
-        return (playerListFooter == null) ? null : io.papermc.paper.adventure.PaperAdventure.LEGACY_SECTION_UXRC.serialize(playerListFooter); // Paper - Adventure
-    }
-
     @Override
     public void setPlayerListHeader(String header) {
         this.playerListHeader = header == null ? null : io.papermc.paper.adventure.PaperAdventure.LEGACY_SECTION_UXRC.deserialize(header); // Paper - Adventure
         updatePlayerListHeaderFooter();
     }
 
+    @Override
+    public String getPlayerListFooter() {
+        return (playerListFooter == null) ? null : io.papermc.paper.adventure.PaperAdventure.LEGACY_SECTION_UXRC.serialize(playerListFooter); // Paper - Adventure
+    }
+
     @Override
     public void setPlayerListFooter(String footer) {
         this.playerListFooter = footer == null ? null : io.papermc.paper.adventure.PaperAdventure.LEGACY_SECTION_UXRC.deserialize(footer); // Paper - Adventure
@@ -473,6 +550,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         packet.footer = (this.playerListFooter == null) ? new ChatComponentText("") : io.papermc.paper.adventure.PaperAdventure.asVanilla(this.playerListFooter); // Paper - Adventure
         getHandle().playerConnection.sendPacket(packet);
     }
+    // Paper end
 
     @Override
     public boolean equals(Object obj) {
@@ -513,7 +591,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             ));
         }
     }
-    // Paper end
+
+    @Override
+    public Location getCompassTarget() {
+        return getHandle().compassTarget;
+    }
 
     @Override
     public void setCompassTarget(Location loc) {
@@ -523,11 +605,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         getHandle().playerConnection.sendPacket(new PacketPlayOutSpawnPosition(new BlockPosition(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()), loc.getYaw()));
     }
 
-    @Override
-    public Location getCompassTarget() {
-        return getHandle().compassTarget;
-    }
-
     @Override
     public void chat(String msg) {
         if (getHandle().playerConnection == null) return;
@@ -546,36 +623,36 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         String instrumentName = null;
         switch (instrument) {
-        case 0:
-            instrumentName = "harp";
-            break;
-        case 1:
-            instrumentName = "basedrum";
-            break;
-        case 2:
-            instrumentName = "snare";
-            break;
-        case 3:
-            instrumentName = "hat";
-            break;
-        case 4:
-            instrumentName = "bass";
-            break;
-        case 5:
-            instrumentName = "flute";
-            break;
-        case 6:
-            instrumentName = "bell";
-            break;
-        case 7:
-            instrumentName = "guitar";
-            break;
-        case 8:
-            instrumentName = "chime";
-            break;
-        case 9:
-            instrumentName = "xylophone";
-            break;
+            case 0:
+                instrumentName = "harp";
+                break;
+            case 1:
+                instrumentName = "basedrum";
+                break;
+            case 2:
+                instrumentName = "snare";
+                break;
+            case 3:
+                instrumentName = "hat";
+                break;
+            case 4:
+                instrumentName = "bass";
+                break;
+            case 5:
+                instrumentName = "flute";
+                break;
+            case 6:
+                instrumentName = "bell";
+                break;
+            case 7:
+                instrumentName = "guitar";
+                break;
+            case 8:
+                instrumentName = "chime";
+                break;
+            case 9:
+                instrumentName = "xylophone";
+                break;
         }
 
         float f = (float) Math.pow(2.0D, (note - 12.0D) / 12.0D);
@@ -746,6 +823,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void sendSignChange(Location loc, List<net.kyori.adventure.text.Component> lines) {
         this.sendSignChange(loc, lines, org.bukkit.DyeColor.BLACK);
     }
+
     @Override
     public void sendSignChange(Location loc, List<net.kyori.adventure.text.Component> lines, DyeColor dyeColor) {
         if (getHandle().playerConnection == null) {
@@ -771,10 +849,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         getHandle().playerConnection.sendPacket(sign.getUpdatePacket());
     }
+
     // Paper end
     @Override
     public void sendSignChange(Location loc, String[] lines) {
-       sendSignChange(loc, lines, DyeColor.BLACK);
+        sendSignChange(loc, lines, DyeColor.BLACK);
     }
 
     @Override
@@ -836,6 +915,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         throw new NotImplementedException("Chunk changes do not yet work"); // TODO: Chunk changes.
     }
+    // Paper end
 
     @Override
     public void sendMap(MapView map) {
@@ -857,14 +937,14 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void setRotation(float yaw, float pitch) {
         throw new UnsupportedOperationException("Cannot set rotation of players. Consider teleporting instead.");
     }
+    // Paper end
 
     // Paper start
     @Override
     public java.util.concurrent.CompletableFuture<Boolean> teleportAsync(Location loc, @javax.annotation.Nonnull PlayerTeleportEvent.TeleportCause cause) {
-        ((CraftWorld)loc.getWorld()).getHandle().getChunkProvider().markAreaHighPriority(new ChunkCoordIntPair(MathHelper.floor(loc.getX()) >> 4, MathHelper.floor(loc.getZ()) >> 4), 28, 3); // Paper - load area high priority
+        ((CraftWorld) loc.getWorld()).getHandle().getChunkProvider().markAreaHighPriority(new ChunkCoordIntPair(MathHelper.floor(loc.getX()) >> 4, MathHelper.floor(loc.getZ()) >> 4), 28, 3); // Paper - load area high priority
         return super.teleportAsync(loc, cause);
     }
-    // Paper end
 
     @Override
     public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) {
@@ -879,7 +959,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         if (entity.playerConnection == null) {
-           return false;
+            return false;
         }
 
         if (entity.isVehicle()) {
@@ -938,16 +1018,15 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
         return wasSet;
     }
-    // Paper end
 
     @Override
-    public void setSneaking(boolean sneak) {
-        getHandle().setSneaking(sneak);
+    public boolean isSneaking() {
+        return getHandle().isSneaking();
     }
 
     @Override
-    public boolean isSneaking() {
-        return getHandle().isSneaking();
+    public void setSneaking(boolean sneak) {
+        getHandle().setSneaking(sneak);
     }
 
     @Override
@@ -977,14 +1056,14 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setSleepingIgnored(boolean isSleeping) {
-        getHandle().fauxSleeping = isSleeping;
-        ((CraftWorld) getWorld()).getHandle().everyoneSleeping();
+    public boolean isSleepingIgnored() {
+        return getHandle().fauxSleeping;
     }
 
     @Override
-    public boolean isSleepingIgnored() {
-        return getHandle().fauxSleeping;
+    public void setSleepingIgnored(boolean isSleeping) {
+        getHandle().fauxSleeping = isSleeping;
+        ((CraftWorld) getWorld()).getHandle().everyoneSleeping();
     }
 
     @Override
@@ -1154,13 +1233,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setPlayerWeather(WeatherType type) {
-        getHandle().setPlayerWeather(type, true);
+    public WeatherType getPlayerWeather() {
+        return getHandle().getPlayerWeather();
     }
 
     @Override
-    public WeatherType getPlayerWeather() {
-        return getHandle().getPlayerWeather();
+    public void setPlayerWeather(WeatherType type) {
+        getHandle().setPlayerWeather(type, true);
     }
 
     @Override
@@ -1187,6 +1266,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    @Override
+    public GameMode getGameMode() {
+        return GameMode.getByValue(getHandle().playerInteractManager.getGameMode().getId());
+    }
+
     @Override
     public void setGameMode(GameMode mode) {
         if (getHandle().playerConnection == null) return;
@@ -1198,11 +1282,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         getHandle().a(EnumGamemode.getById(mode.getValue()));
     }
 
-    @Override
-    public GameMode getGameMode() {
-        return GameMode.getByValue(getHandle().playerInteractManager.getGameMode().getId());
-    }
-
     // Paper start
     @Override
     public int applyMending(int amount) {
@@ -1295,11 +1374,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         getHandle().playerConnection.sendPacket(packet);
     }
 
-    @Nullable
-    private static WeakReference<Plugin> getPluginWeakReference(@Nullable Plugin plugin) {
-        return (plugin == null) ? null : pluginWeakReferences.computeIfAbsent(plugin, WeakReference::new);
-    }
-
     @Override
     @Deprecated
     public void hidePlayer(Player player) {
@@ -1335,6 +1409,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         EntityPlayer other = ((CraftPlayer) player).getHandle();
         unregisterPlayer(other);
     }
+
     private void unregisterPlayer(EntityPlayer other) {
         PlayerChunkMap tracker = ((WorldServer) entity.world).getChunkProvider().playerChunkMap;
         // Paper end
@@ -1382,6 +1457,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         EntityPlayer other = ((CraftPlayer) player).getHandle();
         registerPlayer(other);
     }
+
     private void registerPlayer(EntityPlayer other) {
         PlayerChunkMap tracker = ((WorldServer) entity.world).getChunkProvider().playerChunkMap;
         // Paper end
@@ -1393,6 +1469,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             entry.updatePlayer(getHandle());
         }
     }
+
     // Paper start
     private void reregisterPlayer(EntityPlayer player) {
         if (!hiddenPlayers.containsKey(player.getUniqueID())) {
@@ -1400,6 +1477,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             registerPlayer(player);
         }
     }
+
+    public com.destroystokyo.paper.profile.PlayerProfile getPlayerProfile() {
+        return new com.destroystokyo.paper.profile.CraftPlayerProfile(this).clone();
+    }
+    // Paper end
+
     public void setPlayerProfile(com.destroystokyo.paper.profile.PlayerProfile profile) {
         EntityPlayer self = getHandle();
         self.setProfile(com.destroystokyo.paper.profile.CraftPlayerProfile.asAuthlibCopy(profile));
@@ -1412,9 +1495,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
         refreshPlayer();
     }
-    public com.destroystokyo.paper.profile.PlayerProfile getPlayerProfile() {
-        return new com.destroystokyo.paper.profile.CraftPlayerProfile(this).clone();
-    }
 
     private void refreshPlayer() {
         EntityPlayer handle = getHandle();
@@ -1436,7 +1516,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             this.setOp(true);
         }
     }
-    // Paper end
 
     public void removeDisconnectingPlayer(Player player) {
         hiddenPlayers.remove(player.getUniqueId());
@@ -1488,6 +1567,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return firstPlayed;
     }
 
+    public void setFirstPlayed(long firstPlayed) {
+        this.firstPlayed = firstPlayed;
+    }
+
     @Override
     public long getLastPlayed() {
         return lastPlayed;
@@ -1497,10 +1580,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public boolean hasPlayedBefore() {
         return hasPlayedBefore;
     }
-
-    public void setFirstPlayed(long firstPlayed) {
-        this.firstPlayed = firstPlayed;
-    }
+    // Paper end
 
     // Paper start
     @Override
@@ -1512,7 +1592,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public long getLastSeen() {
         return isOnline() ? System.currentTimeMillis() : this.lastSaveTime;
     }
-    // Paper end
 
     public void readExtraData(NBTTagCompound nbttagcompound) {
         hasPlayedBefore = true;
@@ -1748,6 +1827,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         getHandle().invulnerableTicks = ticks; // SPIGOT-5921: Update both for players, like the getter above
     }
 
+    @Override
+    public float getFlySpeed() {
+        return (float) getHandle().abilities.flySpeed * 2f;
+    }
+
     @Override
     public void setFlySpeed(float value) {
         validateSpeed(value);
@@ -1757,6 +1841,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     }
 
+    @Override
+    public float getWalkSpeed() {
+        return getHandle().abilities.walkSpeed * 2f;
+    }
+
     @Override
     public void setWalkSpeed(float value) {
         validateSpeed(value);
@@ -1766,16 +1855,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         getHandle().getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(player.abilities.walkSpeed); // SPIGOT-5833: combination of the two in 1.16+
     }
 
-    @Override
-    public float getFlySpeed() {
-        return (float) getHandle().abilities.flySpeed * 2f;
-    }
-
-    @Override
-    public float getWalkSpeed() {
-        return getHandle().abilities.walkSpeed * 2f;
-    }
-
     private void validateSpeed(float value) {
         if (value < 0) {
             if (value < -1f) {
@@ -1820,6 +1899,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.server.getScoreboardManager().setPlayerBoard(this, scoreboard);
     }
 
+    @Override
+    public double getHealthScale() {
+        return healthScale;
+    }
+
     @Override
     public void setHealthScale(double value) {
         Validate.isTrue((float) value > 0F, "Must be greater than 0");
@@ -1829,8 +1913,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public double getHealthScale() {
-        return healthScale;
+    public boolean isHealthScaled() {
+        return scaledHealth;
     }
 
     @Override
@@ -1840,11 +1924,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
-    @Override
-    public boolean isHealthScaled() {
-        return scaledHealth;
-    }
-
     public float getScaledHealth() {
         return (float) (isHealthScaled() ? getHealth() * getHealthScale() / getMaxHealth() : getHealth());
     }
@@ -1855,7 +1934,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     public void setRealHealth(double health) {
-        if (Double.isNaN(health)) {return;} // Paper
+        if (Double.isNaN(health)) {
+            return;
+        } // Paper
         this.health = health;
     }
 
@@ -1903,13 +1984,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 break;
             }
         }
-        AttributeModifiable dummy = new AttributeModifiable(GenericAttributes.MAX_HEALTH, (attribute) -> { });
+        AttributeModifiable dummy = new AttributeModifiable(GenericAttributes.MAX_HEALTH, (attribute) -> {
+        });
         // Spigot start
         double healthMod = scaledHealth ? healthScale : getMaxHealth();
-        if ( healthMod >= Float.MAX_VALUE || healthMod <= 0 )
-        {
+        if (healthMod >= Float.MAX_VALUE || healthMod <= 0) {
             healthMod = 20; // Reset health
-            getServer().getLogger().warning( getName() + " tried to crash the server with a large health attribute" );
+            getServer().getLogger().warning(getName() + " tried to crash the server with a large health attribute");
         }
         dummy.setValue(healthMod);
         // Spigot end
@@ -2041,6 +2122,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public java.util.Locale locale() {
         return getHandle().adventure$locale;
     }
+
     // Paper end
     @Override
     public String getLocale() {
@@ -2050,16 +2132,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         // Paper end
     }
 
-    // Paper start
-    public void setAffectsSpawning(boolean affects) {
-        this.getHandle().affectsSpawning = affects;
-    }
-
     @Override
     public boolean getAffectsSpawning() {
         return this.getHandle().affectsSpawning;
     }
 
+    // Paper start
+    public void setAffectsSpawning(boolean affects) {
+        this.getHandle().affectsSpawning = affects;
+    }
+
     @Override
     public void setResourcePack(String url, String hash) {
         Validate.notNull(url, "Resource pack URL cannot be null");
@@ -2072,6 +2154,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return this.resourcePackStatus;
     }
 
+    public void setResourcePackStatus(org.bukkit.event.player.PlayerResourcePackStatusEvent.Status status) {
+        this.resourcePackStatus = status;
+    }
+    // Paper end
+
     @Override
     public String getResourcePackHash() {
         return this.resourcePackHash;
@@ -2082,11 +2169,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return this.resourcePackStatus == org.bukkit.event.player.PlayerResourcePackStatusEvent.Status.SUCCESSFULLY_LOADED;
     }
 
-    public void setResourcePackStatus(org.bukkit.event.player.PlayerResourcePackStatusEvent.Status status) {
-        this.resourcePackStatus = status;
-    }
-    // Paper end
-
     @Override
     public void updateCommands() {
         if (getHandle().playerConnection == null) return;
@@ -2174,20 +2256,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         connection.sendPacket(tp);
     }
 
-    private static int ticks(final java.time.Duration duration) {
-        if (duration == null) {
-            return -1;
-        }
-        return (int) (duration.toMillis() / 50L);
-    }
+    // resetTitle implemented above
 
     @Override
     public void clearTitle() {
         this.getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.CLEAR, null));
     }
 
-    // resetTitle implemented above
-
     @Override
     public void showBossBar(final net.kyori.adventure.bossbar.BossBar bar) {
         ((net.kyori.adventure.bossbar.HackyBossBarPlatformBridge) bar).paper$playerShow(this);
@@ -2269,17 +2344,17 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public <T> T getClientOption(ClientOption<T> type) {
-        if(ClientOption.SKIN_PARTS.equals(type)) {
+        if (ClientOption.SKIN_PARTS.equals(type)) {
             return type.getType().cast(new PaperSkinParts(getHandle().getDataWatcher().get(EntityHuman.getSkinPartsWatcher())));
-        } else if(ClientOption.CHAT_COLORS_ENABLED.equals(type)) {
+        } else if (ClientOption.CHAT_COLORS_ENABLED.equals(type)) {
             return type.getType().cast(getHandle().hasChatColorsEnabled());
-        } else if(ClientOption.CHAT_VISIBILITY.equals(type)) {
+        } else if (ClientOption.CHAT_VISIBILITY.equals(type)) {
             return type.getType().cast(getHandle().getChatFlags() == null ? ChatVisibility.UNKNOWN : ChatVisibility.valueOf(getHandle().getChatFlags().name()));
-        } else if(ClientOption.LOCALE.equals(type)) {
+        } else if (ClientOption.LOCALE.equals(type)) {
             return type.getType().cast(getLocale());
-        } else if(ClientOption.MAIN_HAND.equals(type)) {
+        } else if (ClientOption.MAIN_HAND.equals(type)) {
             return type.getType().cast(getMainHand());
-        } else if(ClientOption.VIEW_DISTANCE.equals(type)) {
+        } else if (ClientOption.VIEW_DISTANCE.equals(type)) {
             return type.getType().cast(getClientViewDistance());
         }
         throw new RuntimeException("Unknown settings type");
@@ -2298,6 +2373,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             ? (org.bukkit.entity.Firework) entity.getBukkitEntity()
             : null;
     }
+    // Paper end
 
     @Override
     public void sendOpLevel(byte level) {
@@ -2320,109 +2396,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
         return set;
     }
-    // Paper end
-
-    // Spigot start
-    private final Player.Spigot spigot = new Player.Spigot()
-    {
-
-        @Override
-        public InetSocketAddress getRawAddress()
-        {
-            return (InetSocketAddress) getHandle().playerConnection.networkManager.getRawAddress();
-        }
-
-        @Override
-        public boolean getCollidesWithEntities() {
-            return CraftPlayer.this.isCollidable();
-        }
-
-        @Override
-        public void setCollidesWithEntities(boolean collides) {
-            CraftPlayer.this.setCollidable(collides);
-        }
-
-        @Override
-        public void respawn()
-        {
-            if ( getHealth() <= 0 && isOnline() )
-            {
-                server.getServer().getPlayerList().moveToWorld( getHandle(), false );
-            }
-        }
-
-        @Override
-        public Set<Player> getHiddenPlayers()
-        {
-            Set<Player> ret = new HashSet<Player>();
-            for ( UUID u : hiddenPlayers.keySet() )
-            {
-                ret.add( getServer().getPlayer( u ) );
-            }
-
-            return java.util.Collections.unmodifiableSet( ret );
-        }
-
-        @Override
-        public void sendMessage(BaseComponent component) {
-          sendMessage( new BaseComponent[] { component } );
-        }
-
-        @Override
-        public void sendMessage(BaseComponent... components) {
-           if ( getHandle().playerConnection == null ) return;
-
-            PacketPlayOutChat packet = new PacketPlayOutChat(null, net.minecraft.network.chat.ChatMessageType.SYSTEM, SystemUtils.b);
-            packet.components = components;
-            getHandle().playerConnection.sendPacket(packet);
-        }
-
-        @Override
-        public void sendMessage(UUID sender, BaseComponent component) {
-            this.sendMessage(net.md_5.bungee.api.ChatMessageType.CHAT, sender, component);
-        }
-
-        @Override
-        public void sendMessage(UUID sender, BaseComponent... components) {
-            this.sendMessage(net.md_5.bungee.api.ChatMessageType.CHAT, sender, components);
-        }
-
-        @Override
-        public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent component) {
-            sendMessage( position, new BaseComponent[] { component } );
-        }
-
-        @Override
-        public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent... components) {
-            if ( getHandle().playerConnection == null ) return;
-
-            PacketPlayOutChat packet = new PacketPlayOutChat(null, net.minecraft.network.chat.ChatMessageType.a((byte) position.ordinal()), SystemUtils.b);
-            packet.components = components;
-            getHandle().playerConnection.sendPacket(packet);
-        }
-
-        @Override
-        public void sendMessage(net.md_5.bungee.api.ChatMessageType position, UUID sender, BaseComponent component) {
-            sendMessage( position, sender, new BaseComponent[] { component } );
-        }
-
-        @Override
-        public void sendMessage(net.md_5.bungee.api.ChatMessageType position, UUID sender, BaseComponent... components) {
-            if ( getHandle().playerConnection == null ) return;
-
-            PacketPlayOutChat packet = new PacketPlayOutChat(null, net.minecraft.network.chat.ChatMessageType.a((byte) position.ordinal()), sender == null ? SystemUtils.b : sender);
-            packet.components = components;
-            getHandle().playerConnection.sendPacket(packet);
-        }
-
-        // Paper start
-        @Override
-        public int getPing()
-        {
-            return getHandle().ping;
-        }
-        // Paper end
-    };
 
     // Paper start - brand support
     @Override
@@ -2431,8 +2404,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
 
-    public Player.Spigot spigot()
-    {
+    public Player.Spigot spigot() {
         return spigot;
     }
     // Spigot end
